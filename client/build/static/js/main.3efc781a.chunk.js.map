{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","Form","onSumbit","useState","receiver","setReceiver","remark","setRemark","amount","setAmount","value","onChange","e","target","type","onClick","App","setWeb3","accounts","setAccounts","contract","setContract","myOrders","setMyOrders","createOrder","methods","send","from","receipt","executeOrder","id","getMyOrders","getSenderOrderList","call","res","useEffect","eth","getAccounts","instance","Contract","MiddleManContract","abi","alert","error","init","data","map","o","key","finished","created_at","finished_at","disabled","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3efc781a.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { useState, useEffect } from \"react\"\nimport MiddleManContract from \"./contracts/MiddleMan.json\"\nimport getWeb3 from \"./getWeb3\"\n\nimport \"./App.css\"\n\nconst Form = ({ onSumbit }) => {\n  const [receiver, setReceiver] = useState(\"\")\n  const [remark, setRemark] = useState(\"\")\n  const [amount, setAmount] = useState(0)\n\n  return (\n    <>\n      <h3>create a order</h3>\n      <label>\n        receiver address:{\" \"}\n        <input value={receiver} onChange={(e) => setReceiver(e.target.value)}></input>\n      </label>\n      <br />\n      <label>\n        amount:\n        <input type=\"number\" value={amount} onChange={(e) => setAmount(e.target.value)}></input>\n        Wei\n      </label>\n      <br />\n      <label>\n        remark:\n        <input value={remark} onChange={(e) => setRemark(e.target.value)}></input>\n      </label>\n      <br />\n      <button onClick={() => onSumbit({ receiver, amount, remark })}>submit</button>\n    </>\n  )\n}\n\nconst App = () => {\n  const [web3, setWeb3] = useState()\n  const [accounts, setAccounts] = useState([])\n  const [contract, setContract] = useState()\n  const [myOrders, setMyOrders] = useState([])\n\n  const runExample = () => {\n    //\n  }\n\n  const createOrder = async ({ receiver, amount, remark }) => {\n    console.log(receiver, amount, remark)\n    const receipt = await contract.methods.createOrder(receiver, remark).send({\n      from: accounts[0],\n      value: amount,\n    })\n    console.log(receipt)\n  }\n\n  const executeOrder = async (id) => {\n    const receipt = await contract.methods.executeOrder(id).send({\n      from: accounts[0],\n    })\n    console.log(receipt)\n  }\n\n  const getMyOrders = async () => {\n    const res = await contract.methods.getSenderOrderList(accounts[0]).call()\n    setMyOrders(res)\n  }\n\n  useEffect(() => {\n    const init = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3()\n\n        // Use web3 to get the user's accounts.\n        const accounts = await web3.eth.getAccounts()\n        const instance = new web3.eth.Contract(\n          MiddleManContract.abi,\n          \"0xf7dd59BB39fF519538e1A3A1D5b1b52496C8AAa0\"\n        )\n\n        setWeb3(web3)\n        setAccounts(accounts)\n        setContract(instance)\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(`Failed to load web3, accounts, or contract. Check console for details.`)\n        console.error(error)\n      }\n    }\n    init()\n  })\n\n  useEffect(() => {\n    if (contract) {\n      getMyOrders()\n    }\n  }, [contract])\n\n  return (\n    <div>\n      <h2>current address: {accounts[0]}</h2>\n      <hr />\n      <Form onSumbit={(data) => createOrder(data)}></Form>\n      <hr />\n      <h3>my orders</h3>\n      <button onClick={() => getMyOrders()}>sync</button>\n      <ul>\n        {myOrders.map((o) => (\n          <li key={o.id}>\n            <i>id: {o.id}</i>|<i>remark: {o.remark}</i>|<i>receiver: {o.receiver}</i>|\n            <i>amount: {o.amount}</i>|<i>finished: {o.finished + \"\"}</i>|\n            <i>created_at: {o.created_at}</i>|<i>finished_at: {o.finished_at}</i>|\n            <button disabled={o.finished} onClick={() => executeOrder(o.id)}>\n              confirm\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}